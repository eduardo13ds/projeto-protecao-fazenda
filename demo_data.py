#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para popular o banco de dados com dados de exemplo para demonstra√ß√£o
Execute este script para ter dados iniciais no sistema StormGuard
"""

import sys
import os
from datetime import datetime, timedelta
import random

# Adicionar o diret√≥rio raiz do projeto ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app
from app.extensions import db
from app.models.usuario import Usuario
from app.models.nivel_acesso import NivelAcesso
from app.models.fazenda import Fazenda
from app.models.tipo_sensor import TipoSensor
from app.models.tipo_atuador import TipoAtuador
from app.models.dispositivo import Dispositivo
from app.models.sensor import Sensor
from app.models.atuador import Atuador
from app.models.registro_leitura import RegistroLeitura
from app.models.alerta import Alerta
from app.models.registro_comando_atuador import RegistroComandoAtuador


def clear_database():
    """Limpa todos os dados do banco de dados."""
    print("üóëÔ∏è  Limpando banco de dados...")

    # Ordem importante para evitar viola√ß√µes de chave estrangeira
    db.session.query(RegistroComandoAtuador).delete()
    db.session.query(RegistroLeitura).delete()
    db.session.query(Alerta).delete()
    db.session.query(Sensor).delete()
    db.session.query(Atuador).delete()
    db.session.query(Dispositivo).delete()
    db.session.query(Fazenda).delete()
    db.session.query(Usuario).delete()
    db.session.query(TipoSensor).delete()
    db.session.query(TipoAtuador).delete()
    db.session.query(NivelAcesso).delete()

    db.session.commit()
    print("‚úÖ Banco de dados limpo!")


def create_access_levels():
    """Cria os n√≠veis de acesso b√°sicos."""
    print("üë• Criando n√≠veis de acesso...")

    levels = [
        {
            'nome_nivel': 'Administrador',
            'descricao': 'Acesso total ao sistema, pode gerenciar usu√°rios e configura√ß√µes'
        },
        {
            'nome_nivel': 'Gerente',
            'descricao': 'Acesso √† gest√£o da fazenda, relat√≥rios e alertas'
        },
        {
            'nome_nivel': 'Operador',
            'descricao': 'Acesso b√°sico aos dados e alertas da fazenda'
        },
        {
            'nome_nivel': 'Visualizador',
            'descricao': 'Apenas visualiza√ß√£o de dados e relat√≥rios'
        }
    ]

    for level_data in levels:
        level = NivelAcesso(**level_data)
        db.session.add(level)

    db.session.commit()
    print(f"‚úÖ {len(levels)} n√≠veis de acesso criados!")


def create_users():
    """Cria usu√°rios de demonstra√ß√£o."""
    print("üë§ Criando usu√°rios...")

    users = [
        {
            'nome_usuario': 'admin',
            'nome_completo': 'Administrador do Sistema',
            'email': 'admin@stormguard.com',
            'password': 'admin123'
        },
        {
            'nome_usuario': 'joao.silva',
            'nome_completo': 'Jo√£o Silva',
            'email': 'joao.silva@fazenda.com',
            'password': 'joao123'
        },
        {
            'nome_usuario': 'maria.santos',
            'nome_completo': 'Maria Santos',
            'email': 'maria.santos@fazenda.com',
            'password': 'maria123'
        },
        {
            'nome_usuario': 'carlos.oliveira',
            'nome_completo': 'Carlos Oliveira',
            'email': 'carlos.oliveira@fazenda.com',
            'password': 'carlos123'
        }
    ]

    for user_data in users:
        password = user_data.pop('password')
        user = Usuario(**user_data)
        user.set_password(password)
        db.session.add(user)

    db.session.commit()
    print(f"‚úÖ {len(users)} usu√°rios criados!")


def create_farms():
    """Cria fazendas de demonstra√ß√£o."""
    print("üöú Criando fazendas...")

    farms = [
        {
            'nome_fazenda': 'Fazenda S√£o Jos√©',
            'localizacao_latitude': -15.7942,
            'localizacao_longitude': -47.8822,
            'area_total_hectares': 250.50,
            'descricao': 'Fazenda especializada em cultivo de soja e milho'
        },
        {
            'nome_fazenda': 'Fazenda Boa Vista',
            'localizacao_latitude': -22.9068,
            'localizacao_longitude': -43.1729,
            'area_total_hectares': 180.25,
            'descricao': 'Fazenda focada em pecu√°ria e agricultura familiar'
        },
        {
            'nome_fazenda': 'Fazenda Santa Maria',
            'localizacao_latitude': -23.5505,
            'localizacao_longitude': -46.6333,
            'area_total_hectares': 320.75,
            'descricao': 'Grande fazenda com cultivo diversificado'
        }
    ]

    for farm_data in farms:
        farm = Fazenda(**farm_data)
        db.session.add(farm)

    db.session.commit()
    print(f"‚úÖ {len(farms)} fazendas criadas!")


def create_sensor_types():
    """Cria tipos de sensores."""
    print("üå°Ô∏è  Criando tipos de sensores...")

    sensor_types = [
        {'nome_tipo': 'Temperatura', 'unidade_medida': '¬∞C'},
        {'nome_tipo': 'Umidade', 'unidade_medida': '%'},
        {'nome_tipo': 'Press√£o Atmosf√©rica', 'unidade_medida': 'hPa'},
        {'nome_tipo': 'Velocidade do Vento', 'unidade_medida': 'm/s'},
        {'nome_tipo': 'Dire√ß√£o do Vento', 'unidade_medida': '¬∞'},
        {'nome_tipo': 'Precipita√ß√£o', 'unidade_medida': 'mm'},
        {'nome_tipo': 'Radia√ß√£o Solar', 'unidade_medida': 'W/m¬≤'},
        {'nome_tipo': 'pH do Solo', 'unidade_medida': 'pH'},
        {'nome_tipo': 'Condutividade El√©trica', 'unidade_medida': 'mS/cm'},
        {'nome_tipo': 'Luminosidade', 'unidade_medida': 'lux'}
    ]

    for sensor_type_data in sensor_types:
        sensor_type = TipoSensor(**sensor_type_data)
        db.session.add(sensor_type)

    db.session.commit()
    print(f"‚úÖ {len(sensor_types)} tipos de sensores criados!")


def create_actuator_types():
    """Cria tipos de atuadores."""
    print("ü§ñ Criando tipos de atuadores...")

    actuator_types = [
        {'nome_tipo': 'Sistema de Irriga√ß√£o'},
        {'nome_tipo': 'Ventilador'},
        {'nome_tipo': 'Aquecedor'},
        {'nome_tipo': 'Bomba d\'√°gua'},
        {'nome_tipo': 'V√°lvula Solenoide'},
        {'nome_tipo': 'Motor de Port√£o'},
        {'nome_tipo': 'Sistema de Nebuliza√ß√£o'},
        {'nome_tipo': 'Alarme Sonoro'}
    ]

    for actuator_type_data in actuator_types:
        actuator_type = TipoAtuador(**actuator_type_data)
        db.session.add(actuator_type)

    db.session.commit()
    print(f"‚úÖ {len(actuator_types)} tipos de atuadores criados!")


def create_devices():
    """Cria dispositivos IoT."""
    print("üì° Criando dispositivos IoT...")

    devices = [
        {
            'identificador_unico': 'sensor_area_central_01',
            'nome_amigavel': 'Esta√ß√£o Central Principal',
            'area': 'Central',
            'id_fazenda': 1,
            'status': 'Ativo'
        },
        {
            'identificador_unico': 'sensor_area_norte_01',
            'nome_amigavel': 'Sensor Norte - Campo A',
            'area': 'Norte',
            'id_fazenda': 1,
            'status': 'Ativo'
        },
        {
            'identificador_unico': 'sensor_area_sul_01',
            'nome_amigavel': 'Sensor Sul - Estufa 1',
            'area': 'Sul',
            'id_fazenda': 1,
            'status': 'Ativo'
        },
        {
            'identificador_unico': 'sensor_area_leste_01',
            'nome_amigavel': 'Sensor Leste - Pastagem',
            'area': 'Leste',
            'id_fazenda': 2,
            'status': 'Ativo'
        },
        {
            'identificador_unico': 'sensor_area_oeste_01',
            'nome_amigavel': 'Sensor Oeste - Reservat√≥rio',
            'area': 'Oeste',
            'id_fazenda': 2,
            'status': 'Manuten√ß√£o'
        },
        {
            'identificador_unico': 'sensor_central_fazenda3',
            'nome_amigavel': 'Central de Monitoramento',
            'area': 'Central',
            'id_fazenda': 3,
            'status': 'Ativo'
        }
    ]

    for device_data in devices:
        device = Dispositivo(**device_data)
        device.data_instalacao = datetime.utcnow() - timedelta(days=random.randint(30, 365))
        if device.status == 'Ativo':
            device.ultimo_ping = datetime.utcnow() - timedelta(minutes=random.randint(1, 5))
        db.session.add(device)

    db.session.commit()
    print(f"‚úÖ {len(devices)} dispositivos criados!")


def create_sensors():
    """Cria sensores associados aos dispositivos."""
    print("üî¨ Criando sensores...")

    devices = Dispositivo.query.all()
    sensor_types = TipoSensor.query.all()

    sensors_created = 0

    for device in devices:
        # Cada dispositivo ter√° alguns sensores aleat√≥rios
        num_sensors = random.randint(3, 6)
        selected_types = random.sample(sensor_types, min(num_sensors, len(sensor_types)))

        for sensor_type in selected_types:
            sensor = Sensor(
                id_dispositivo=device.id_dispositivo,
                id_tipo_sensor=sensor_type.id_tipo_sensor,
                status='Ativo'
            )

            # Definir limites de alerta baseados no tipo de sensor
            if 'temperatura' in sensor_type.nome_tipo.lower():
                sensor.limite_minimo_alerta = 5.0
                sensor.limite_maximo_alerta = 40.0
            elif 'umidade' in sensor_type.nome_tipo.lower():
                sensor.limite_minimo_alerta = 20.0
                sensor.limite_maximo_alerta = 90.0
            elif 'pressao' in sensor_type.nome_tipo.lower():
                sensor.limite_minimo_alerta = 980.0
                sensor.limite_maximo_alerta = 1050.0

            sensor.ultima_leitura = datetime.utcnow() - timedelta(minutes=random.randint(1, 10))
            db.session.add(sensor)
            sensors_created += 1

    db.session.commit()
    print(f"‚úÖ {sensors_created} sensores criados!")


def create_actuators():
    """Cria atuadores."""
    print("‚öôÔ∏è  Criando atuadores...")

    farms = Fazenda.query.all()
    actuator_types = TipoAtuador.query.all()

    actuators = []

    for farm in farms:
        # Cada fazenda ter√° alguns atuadores
        num_actuators = random.randint(2, 4)

        for i in range(num_actuators):
            actuator_type = random.choice(actuator_types)

            actuator = Atuador(
                nome_atuador=f"{actuator_type.nome_tipo} - {farm.nome_fazenda} #{i+1}",
                id_tipo_atuador=actuator_type.id_tipo_atuador,
                id_fazenda=farm.id_fazenda,
                status_atual='Desligado',
                endereco_logico=f"192.168.1.{100 + len(actuators)}",
                fabricante_modelo=random.choice(['Siemens S7-1200', 'Allen Bradley', 'Schneider Electric', 'ABB AC500'])
            )

            actuators.append(actuator)
            db.session.add(actuator)

    db.session.commit()
    print(f"‚úÖ {len(actuators)} atuadores criados!")


def create_sensor_readings():
    """Cria leituras hist√≥ricas dos sensores."""
    print("üìä Criando leituras hist√≥ricas dos sensores...")

    sensors = Sensor.query.all()
    readings_created = 0

    # Criar leituras para os √∫ltimos 7 dias
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=7)

    for sensor in sensors:
        current_time = start_time

        while current_time <= end_time:
            # Gerar valor baseado no tipo de sensor
            if 'temperatura' in sensor.tipo_sensor.nome_tipo.lower():
                base_value = 25.0
                variation = random.uniform(-8, 10)
                # Varia√ß√£o diurna
                hour_factor = abs(12 - current_time.hour) / 12
                value = base_value + variation + (hour_factor * 5)

            elif 'umidade' in sensor.tipo_sensor.nome_tipo.lower():
                base_value = 65.0
                variation = random.uniform(-25, 25)
                # Umidade inversa √† temperatura
                hour_factor = (12 - abs(12 - current_time.hour)) / 12
                value = base_value + variation + (hour_factor * 10)

            elif 'pressao' in sensor.tipo_sensor.nome_tipo.lower():
                value = random.uniform(990, 1025)

            elif 'vento' in sensor.tipo_sensor.nome_tipo.lower():
                value = random.uniform(0, 15)

            elif 'precipitacao' in sensor.tipo_sensor.nome_tipo.lower():
                # Precipita√ß√£o √© espor√°dica
                if random.random() < 0.15:  # 15% de chance de chuva
                    value = random.uniform(0.1, 25.0)
                else:
                    value = 0.0

            else:
                value = random.uniform(0, 100)

            # Determinar qualidade da leitura
            quality = 'Confiavel'
            if random.random() < 0.05:  # 5% de chance de ru√≠do
                quality = 'Ruido'
                value = value * random.uniform(0.5, 1.5)
            elif random.random() < 0.02:  # 2% de chance de fora da faixa
                quality = 'Fora da Faixa'
                value = value * random.uniform(2, 5)

            reading = RegistroLeitura(
                id_sensor=sensor.id_sensor,
                valor_leitura=f"{value:.2f}",
                timestamp_leitura=current_time,
                qualidade=quality,
                valor_numerico=round(value, 2),
                unidade_medida=sensor.tipo_sensor.unidade_medida
            )

            db.session.add(reading)
            readings_created += 1

            # Pr√≥xima leitura (intervalo aleat√≥rio entre 30 min e 2 horas)
            current_time += timedelta(minutes=random.randint(30, 120))

    db.session.commit()
    print(f"‚úÖ {readings_created} leituras criadas!")


def create_alerts():
    """Cria alertas hist√≥ricos."""
    print("üö® Criando alertas...")

    farms = Fazenda.query.all()
    alert_types = ['Chuva Intensa', 'Temperatura Extrema', 'Vento Forte', 'Umidade Cr√≠tica', 'Falha de Sensor']
    intensities = ['Leve', 'Moderado', 'Severo', 'Critico']

    alerts_created = 0

    # Criar alertas para os √∫ltimos 30 dias
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=30)

    for farm in farms:
        current_time = start_time

        while current_time <= end_time:
            # Probabilidade de alerta (5% por dia)
            if random.random() < 0.05:
                alert_type = random.choice(alert_types)
                intensity = random.choice(intensities)

                # Probabilidade baseada na intensidade
                if intensity == 'Critico':
                    probability = random.uniform(85, 95)
                elif intensity == 'Severo':
                    probability = random.uniform(70, 85)
                elif intensity == 'Moderado':
                    probability = random.uniform(50, 70)
                else:
                    probability = random.uniform(25, 50)

                # Mensagens baseadas no tipo
                messages = {
                    'Chuva Intensa': f'Previs√£o de chuva intensa com {probability:.1f}% de probabilidade',
                    'Temperatura Extrema': f'Temperatura extrema detectada - {probability:.1f}% de confian√ßa',
                    'Vento Forte': f'Rajadas de vento forte previstas - {probability:.1f}% de probabilidade',
                    'Umidade Cr√≠tica': f'N√≠veis cr√≠ticos de umidade - {probability:.1f}% de certeza',
                    'Falha de Sensor': f'Poss√≠vel falha em sensor detectada - {probability:.1f}% de confian√ßa'
                }

                alert = Alerta(
                    id_fazenda=farm.id_fazenda,
                    timestamp_emissao=current_time,
                    tipo_alerta=alert_type,
                    intensidade=intensity,
                    probabilidade=round(probability, 2),
                    mensagem=messages[alert_type],
                    status='Ativo' if current_time > end_time - timedelta(hours=6) else random.choice(['Reconhecido', 'Resolvido'])
                )

                # Se foi reconhecido, adicionar timestamp
                if alert.status in ['Reconhecido', 'Resolvido']:
                    alert.timestamp_reconhecimento = current_time + timedelta(minutes=random.randint(10, 180))
                    alert.id_usuario_reconheceu = random.randint(1, 4)  # Assumindo IDs de usu√°rio de 1 a 4

                db.session.add(alert)
                alerts_created += 1

            current_time += timedelta(hours=random.randint(6, 24))

    db.session.commit()
    print(f"‚úÖ {alerts_created} alertas criados!")


def create_actuator_commands():
    """Cria registros de comandos de atuadores."""
    print("üéõÔ∏è  Criando registros de comandos...")

    actuators = Atuador.query.all()
    commands = ['LIGAR', 'DESLIGAR', 'STATUS', 'RESET', 'CONFIGURAR']

    commands_created = 0

    # Criar comandos para os √∫ltimos 15 dias
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=15)

    for actuator in actuators:
        current_time = start_time

        while current_time <= end_time:
            # Probabilidade de comando (10% por dia)
            if random.random() < 0.1:
                command = random.choice(commands)

                # Status de execu√ß√£o
                status = random.choices(
                    ['Sucesso', 'Falha', 'Pendente'],
                    weights=[85, 10, 5]
                )[0]

                # Par√¢metros baseados no comando
                parameters = {}
                if command == 'CONFIGURAR':
                    parameters = {'intensidade': random.randint(1, 10), 'modo': random.choice(['auto', 'manual'])}
                elif command in ['LIGAR', 'DESLIGAR']:
                    parameters = {'duracao_segundos': random.randint(300, 3600)}

                # Mensagem de retorno
                if status == 'Sucesso':
                    return_message = f"Comando {command} executado com sucesso"
                elif status == 'Falha':
                    return_message = f"Falha ao executar {command}: {random.choice(['Timeout', 'Conex√£o perdida', 'Erro interno'])}"
                else:
                    return_message = f"Comando {command} em execu√ß√£o..."

                command_record = RegistroComandoAtuador(
                    id_atuador=actuator.id_atuador,
                    id_usuario_executor=random.randint(1, 4),
                    comando_executado=command,
                    parametros_comando=parameters,
                    timestamp_comando=current_time,
                    status_execucao=status,
                    mensagem_retorno=return_message
                )

                db.session.add(command_record)
                commands_created += 1

            current_time += timedelta(hours=random.randint(4, 48))

    db.session.commit()
    print(f"‚úÖ {commands_created} registros de comandos criados!")


def main():
    """Fun√ß√£o principal."""
    print("üå± StormGuard - Populador de Dados de Demonstra√ß√£o")
    print("=" * 50)

    # Criar aplica√ß√£o Flask
    app = create_app('development')

    with app.app_context():
        print("üîÑ Conectando ao banco de dados...")

        # Limpar dados existentes
        if input("‚ö†Ô∏è  Deseja limpar todos os dados existentes? (s/N): ").lower().startswith('s'):
            clear_database()

        # Criar todas as tabelas
        db.create_all()

        # Popular com dados
        try:
            create_access_levels()
            create_users()
            create_farms()
            create_sensor_types()
            create_actuator_types()
            create_devices()
            create_sensors()
            create_actuators()
            create_sensor_readings()
            create_alerts()
            create_actuator_commands()

            print("\n" + "=" * 50)
            print("üéâ Dados de demonstra√ß√£o criados com sucesso!")
            print("\nüìã Resumo:")
            print(f"   üë• Usu√°rios: {Usuario.query.count()}")
            print(f"   üöú Fazendas: {Fazenda.query.count()}")
            print(f"   üì° Dispositivos: {Dispositivo.query.count()}")
            print(f"   üî¨ Sensores: {Sensor.query.count()}")
            print(f"   ‚öôÔ∏è  Atuadores: {Atuador.query.count()}")
            print(f"   üìä Leituras: {RegistroLeitura.query.count()}")
            print(f"   üö® Alertas: {Alerta.query.count()}")
            print(f"   üéõÔ∏è  Comandos: {RegistroComandoAtuador.query.count()}")

            print("\nüîë Credenciais de acesso:")
            print("   Admin: admin / admin123")
            print("   Usu√°rio: joao.silva / joao123")
            print("   Usu√°rio: maria.santos / maria123")
            print("   Usu√°rio: carlos.oliveira / carlos123")

            print("\n‚ú® Sistema pronto para demonstra√ß√£o!")

        except Exception as e:
            print(f"‚ùå Erro ao criar dados: {e}")
            db.session.rollback()
            return 1

    return 0


if __name__ == '__main__':
    exit(main())
